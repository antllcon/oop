Инициализация Bank: положительное начальное значение наличных; бросок BankOperationError при отрицательном.
OpenAccount/CloseAccount: получение уникальных ID; при закрытии счёта возвращается правильная сумма; остаток наличных в банке корректно обновляется.
DepositMoney и TryDepositMoney: успешный депозит уменьша­ет GetCash() и увеличивает баланс счёта; TryDepositMoney возвращает false при нехватке наличных; DepositMoney бросает при ошибках счёта или отрицательном.
WithdrawMoney и TryWithdrawMoney: успешный вывод увеличивает GetCash() и уменьшает баланс; TryWithdrawMoney возвращает false при недостатке баланса; WithdrawMoney бросает при ошибочном счёте или отрицательном.
SendMoney и TrySendMoney: успешный перевод корректно изменяет оба счёта; TrySendMoney при нехватке возвращает false, а счёта не меняются; SendMoney бросает при невалидных ID, отрицательном, или недостатке средств; проверка атомарности (при ошибке ни один счёт не меняется).

Граница значений Money: депозиты/снятия/переводы на ноль; на максимально возможное Money; на отрицательные суммы — std::out_of_range.

Исключительная безопасность Bank: базовая гарантия — при выбросе исключения внутреннее состояние остаётся консистентным (тест, заставляющий DepositMoney бросить, и проверяющий, что наличные и депозиты не изменились).

PersonWithAccount: открытие/закрытие счёта: после OpenAccount возвращается ID и счёт появляется в банке с нулём; CloseAccount корректно обновляет кошелёк и удаляет счёт.

PersonWithAccount: Deposit/Withdraw: аналогично банку, плюс корректное списание/возврат налички; тест на бросок и на восстановление налички при ошибке.

PersonWithAccount: SendMoney: проксирует в Bank::SendMoney; при ошибках счёта или недостатке средств — должно бросать и не менять кошелёк.

Person::TransferTo: списывает и добавляет наличные между двумя Person; проверка работы на граничных значениях и на исключения (недостаток средств).

Акторы–стейты: для каждого героя (Homer, Marge, Bart, Lisa, Apu, Burns, Nelson, Chester, Waylon) проверить, что Step() в стандартных условиях выполняет нужные операции (перевод, снятие, депозит, покупка).

Пропуск хода: когда у героя недостаточно налички или баланса, Step() не должен бросать, а логирует “skip” и ничего не меняет.

Nelson: случайное событие воровства; тестировать две ветки — когда у Барта есть наличка (воровство + покупка сигарет), и когда нет (пропуск).

Chester: если у Гомера есть баланс — перевод на счёт Честера; если нет — корректный catch и пропуск; после перевода покупка у Апу.

Waylon: закрытие/открытие счёта с вероятностью; проверка, что при CloseAccount деньги возвращаются в кашелёк, и при Deposit всё уходит обратно; кейс «перевод на невалидный счёт» — SendMoney бросает, но состояние героя и банка не меняется.

Apu и Burns: автоматический депозит налички и оплата счёта; проверка, что наличка у Apu обнуляется после депозита, и m_cash банка увеличивается; Burns платит зарплату всем работникам (Homer, Waylon) — верные суммы на счетах.

Общие инварианты: после каждого шага суммарная наличка героев + Bank::GetCash() + все депозитные балансы равна исходному общему капиталу.

Симуляция N итераций: корректный вывод в stdout для N=0, N=1, и N>1; чтение N из аргументов и stdin.

Граничные сценарии: все операции на пустой системе (cash=0); один единственный счёт; много итераций; разноплановые взаимодействия (например, несколько акторов на одном счёте).

Исключения пользовательских классов: проверка, что BankOperationError правильно наследует runtime_error и бросается ожидаемым кодом.